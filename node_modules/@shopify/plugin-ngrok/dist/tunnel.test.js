import { authenticate, start } from './tunnel';
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
import { file, ui, os } from '@shopify/cli-kit';
import ngrok from '@shopify/ngrok';
const options = { port: 1234 };
let tmpDir;
beforeEach(async () => {
    vi.mock('@shopify/ngrok');
    vi.mocked(ngrok.connect).mockResolvedValue('https://fake.ngrok.io');
    vi.mocked(ngrok.authtoken).mockResolvedValue(undefined);
    vi.mocked(ngrok.validConfig).mockResolvedValue(true);
    vi.mocked(ngrok.upgradeConfig).mockResolvedValue(undefined);
    vi.mock('@shopify/cli-kit', async () => {
        const cliKit = await vi.importActual('@shopify/cli-kit');
        return {
            ...cliKit,
            ui: {
                prompt: vi.fn(),
            },
            environment: {
                local: {
                    homeDirectory: () => tmpDir,
                }
            },
            os: {
                platformAndArch: vi.fn(),
            },
        };
    });
});
afterEach(async () => {
    vi.clearAllMocks();
    if (tmpDir) {
        await file.rmdir(tmpDir);
    }
});
describe('start', () => {
    it('creates a new tunnel on the given port', async () => {
        // Given
        const connectSpy = vi.spyOn(ngrok, 'connect');
        // When
        const got = await start(options);
        // Then
        expect(connectSpy).toHaveBeenCalledWith({ proto: 'http', addr: 1234 });
        expect(got).toEqual('https://fake.ngrok.io');
    });
    it('asks for the token and authenticates if the configuration file is wrong', async () => {
        // Given
        vi.mocked(ngrok.validConfig).mockResolvedValue(false);
        vi.mocked(ui.prompt).mockResolvedValue({ token: '123' });
        const authtokenSpy = vi.spyOn(ngrok, 'authtoken');
        // When
        await start(options);
        // Then
        expect(authtokenSpy).toHaveBeenCalledWith('123');
    });
    it('throws an error if the ngrok tunnel fails to start with a specific message', async () => {
        // Given
        const error = new Error('Your account has been suspended');
        vi.spyOn(ngrok, 'connect').mockImplementation(() => Promise.reject(error));
        // When
        const got = start(options);
        // Then
        expect(got).rejects.toThrow(`The ngrok tunnel could not be started.\n\nYour account has been suspended`);
    });
    it('throws an error if the ngrok tunnel fails to start because of another tunnel is already running in a non windows platform', async () => {
        // Given
        const error = new Error('Your account is limited to 1 simultaneous ngrok agent session.\n\nMore info: https://ngrok.com/docs/errors/err_ngrok_108');
        vi.spyOn(ngrok, 'connect').mockImplementation(() => Promise.reject(error));
        vi.mocked(os.platformAndArch).mockReturnValue({ platform: 'darwin', arch: 'arch' });
        // When
        const got = start(options);
        // Then
        expect(got).rejects.toThrow(`The ngrok tunnel could not be started.\n\nYour account is limited to 1 simultaneous ngrok agent session.`);
        expect(got).rejects.toContain({ tryMessage: "Kill all the ngrok processes with \u001b[1m\u001b[33mkillall ngrok\u001b[39m\u001b[22m" });
    });
    it('throws an error if the ngrok tunnel fails to start because of another tunnel is already running in windows platform', async () => {
        // Given
        const error = new Error('Your account is limited to 1 simultaneous ngrok agent session.\n\nMore info: https://ngrok.com/docs/errors/err_ngrok_108');
        vi.spyOn(ngrok, 'connect').mockImplementation(() => Promise.reject(error));
        vi.mocked(os.platformAndArch).mockReturnValue({ platform: 'windows', arch: 'arch' });
        // When
        const got = start(options);
        // Then
        expect(got).rejects.toThrow(`The ngrok tunnel could not be started.\n\nYour account is limited to 1 simultaneous ngrok agent session.`);
        expect(got).rejects.toContain({ tryMessage: "Kill all the ngrok processes with \u001b[1m\u001b[33mtaskkill /f /im ngrok.exe\u001b[39m\u001b[22m" });
    });
    it.each(['err_ngrok_105', 'err_ngrok_106', 'err_ngrok_107'])('throws an error if the ngrok tunnel fails to start because of a %p token problem', async (ngrokError) => {
        // Given
        const error = new Error(`The authtoken you specified does not look like a proper ngrok tunnel authtoken.\n\nMore info: https://ngrok.com/docs/errors/${ngrokError}`);
        vi.spyOn(ngrok, 'connect').mockImplementation(() => Promise.reject(error));
        // When
        const got = start(options);
        // Then
        expect(got).rejects.toThrow(`The ngrok tunnel could not be started.\n\nThe authtoken you specified does not look like a proper ngrok tunnel authtoken.`);
        expect(got).rejects.toContain({ tryMessage: "Update your ngrok token with \u001b[1m\u001b[33mshopify ngrok auth\u001b[39m\u001b[22m" });
    });
});
describe('authenticate', () => {
    it('calls the authenticate method from tunnel with the expected token', async () => {
        // Given
        const authtokenSpy = vi.spyOn(ngrok, 'authtoken');
        // When
        await authenticate('token');
        // Then
        expect(authtokenSpy).toHaveBeenCalledWith('token');
    });
    it('calls the upgradeConfig method from tunnel', async () => {
        // Given
        const upgradeConfigSpy = vi.spyOn(ngrok, 'upgradeConfig');
        // When
        await authenticate('token');
        // Then
        expect(upgradeConfigSpy).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVubmVsLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHVubmVsLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxLQUFLLEVBQUMsTUFBTSxVQUFVLENBQUE7QUFDNUMsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFDLE1BQU0sUUFBUSxDQUFBO0FBQ3RFLE9BQU8sRUFBQyxJQUFJLEVBQVEsRUFBRSxFQUFFLEVBQUUsRUFBQyxNQUFNLGtCQUFrQixDQUFBO0FBQ25ELE9BQU8sS0FBSyxNQUFNLGdCQUFnQixDQUFBO0FBRWxDLE1BQU0sT0FBTyxHQUFHLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFBO0FBQzVCLElBQUksTUFBYyxDQUFBO0FBRWxCLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNwQixFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDekIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtJQUNuRSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN2RCxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNwRCxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUUzRCxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3JDLE1BQU0sTUFBTSxHQUFRLE1BQU0sRUFBRSxDQUFDLFlB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