import { error, os, output, ui } from '@shopify/cli-kit';
import ngrok from '@shopify/ngrok';
const NgrokError = (ngrokErrorMessage) => {
    return new error.Abort(`The ngrok tunnel could not be started.\n\n${ngrokErrorMessage}`, buildTryMessage(ngrokErrorMessage));
};
export async function start(options) {
    if (!(await ngrok.validConfig())) {
        const token = await tokenPrompt();
        await authenticate(token);
    }
    return ngrok.connect({ proto: 'http', addr: options.port }).catch((e) => {
        throw NgrokError(e.message);
    });
}
export async function authenticate(token) {
    if (!token) {
        token = await tokenPrompt(false);
    }
    await ngrok.authtoken(token);
    await ngrok.upgradeConfig();
}
async function tokenPrompt(showExplanation = true) {
    const explanation = showExplanation ? '\nTo make your local code accessible to your dev store, you need to use a ' +
        'Shopify-trusted tunneling service called ngrok. ' : '';
    const ngrokURL = 'https://dashboard.ngrok.com/get-started/your-authtoken';
    const link = output.token.link(ngrokURL, ngrokURL);
    output.info(output.content `${explanation}To sign up and get an auth token: ${link}\n`);
    const question = {
        type: 'password',
        name: 'token',
        message: 'Enter your ngrok token.',
        validate: (value) => {
            if (value.length === 0) {
                return 'Token cannot be empty';
            }
            return true;
        },
    };
    const input = await ui.prompt([question]);
    return input.token;
}
function buildTryMessage(nrokErrorMessage) {
    if (/err_ngrok_108/.test(nrokErrorMessage)) {
        const { platform } = os.platformAndArch();
        let tryMessage = 'Kill all the ngrok processes with ';
        if (platform === 'windows') {
            return tryMessage.concat(output.content `${output.token.genericShellCommand('taskkill /f /im ngrok.exe')}`.value);
        }
        else {
            return tryMessage.concat(output.content `${output.token.genericShellCommand('killall ngrok')}`.value);
        }
    }
    else if (/err_ngrok_105|err_ngrok_106|err_ngrok_107/.test(nrokErrorMessage)) {
        return output.content `Update your ngrok token with ${output.token.genericShellCommand('shopify ngrok auth')}`.value;
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVubmVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R1bm5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQVUsRUFBRSxFQUFDLE1BQU0sa0JBQWtCLENBQUE7QUFDOUQsT0FBTyxLQUFLLE1BQU0sZ0JBQWdCLENBQUE7QUFNbEMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxpQkFBeUIsRUFBRSxFQUFFO0lBQy9DLE9BQU8sSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxpQkFBaUIsRUFBRSxFQUFFLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUE7QUFDOUgsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxLQUFLLENBQUMsT0FBcUI7SUFDL0MsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRTtRQUNoQyxNQUFNLEtBQUssR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFBO1FBQ2pDLE1BQU0sWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQzFCO0lBRUQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBUSxFQUFFLEVBQUU7UUFDM0UsTUFBTSxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzdCLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsWUFBWSxDQUFDLEtBQWE7SUFDOUMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNWLEtBQUssR0FBRyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUNqQztJQUNELE1BQU0sS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM1QixNQUFNLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQTtBQUM3QixDQUFDO0FBRUQsS0FBSyxVQUFVLFdBQVcsQ0FBQyxrQkFBMkIsSUFBSTtJQUN4RCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLDRFQUE0RTtRQUNsSCxrREFBa0QsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLHdEQUF3RCxDQUFBO0lBQ3pFLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUEsR0FBRyxXQUFXLHFDQUFxQyxJQUFJLElBQUksQ0FBQyxDQUFBO0lBRXRGLE1BQU0sUUFBUSxHQUFnQjtRQUM1QixJQUFJLEVBQUUsVUFBVTtRQUNoQixJQUFJLEVBQUUsT0FBTztRQUNiLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDbEIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDdEIsT0FBTyx1QkFBdUIsQ0FBQTthQUMvQjtZQUNELE9BQU8sSUFBSSxDQUFBO1FBQ2IsQ0FBQztLQUNGLENBQUE7SUFFRCxNQUFNLEtBQUssR0FBb0IsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtJQUMxRCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUE7QUFDcEIsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLGdCQUF3QjtJQUMvQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtRQUMxQyxNQUFNLEVBQUMsUUFBUSxFQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFBO1FBQ3ZDLElBQUksVUFBVSxHQUFHLG9DQUFvQyxDQUFBO1FBQ3JELElBQUcsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN6QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFBO1NBQ2pIO2FBQU07WUFDTCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNyRztLQUNGO1NBQU0sSUFBSSwyQ0FBMkMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtRQUM3RSxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUEsZ0NBQWdDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQTtLQUNwSDtJQUNELE9BQU8sU0FBUyxDQUFBO0FBQ2xCLENBQUMifQ==