import { dependency, file, error, path } from '@shopify/cli-kit';
import { createServer } from 'vite';
import 'path';
import 'fs';

const genericConfigurationFileNames = {
  tailwind: "tailwind.config",
  postCSS: "postcss.config",
  eslint: ".eslintrc.js",
  typescript: {
    config: "tsconfig.json"
  },
  ...dependency.genericConfigurationFileNames
};

async function viteception(paths, options) {
    const isWorker = process.env.WORKER;
    delete process.env.WORKER;
    const server = await createServer({
        clearScreen: false,
        server: { middlewareMode: 'ssr' },
        ...options,
    });
    if (isWorker) {
        process.env.WORKER = isWorker;
    }
    const loaded = await Promise.all(paths.map((path) => server.ssrLoadModule(path)));
    await server.close();
    return { server, loaded };
}

process.env.HYDROGEN_SERVER_ENTRY || '/src/App.server';
// The character ":" breaks Vite with Node >= 16.15. Use "_" instead
const VIRTUAL_PREFIX = 'virtual__';
const PROXY_PREFIX = 'proxy__';
const HYDROGEN_CONFIG_ID = 'hydrogen.config.ts';
const VIRTUAL_PROXY_HYDROGEN_CONFIG_ID = VIRTUAL_PREFIX + PROXY_PREFIX + HYDROGEN_CONFIG_ID;

// Provide Hydrogen config loader to external tools like the CLI
async function loadConfig(options = { root: process.cwd() }) {
    const { loaded } = await viteception([VIRTUAL_PROXY_HYDROGEN_CONFIG_ID], options);
    return {
        configuration: loaded[0].default,
        configurationPath: loaded[0].configPath,
    };
}

class AppErrors {
  constructor() {
    this.errors = {};
  }
  addError(path2, message) {
    this.errors[path2] = message;
  }
  getError(path2) {
    return this.errors[path2];
  }
  isEmpty() {
    return Object.keys(this.errors).length === 0;
  }
  toJSON() {
    return Object.values(this.errors);
  }
}
class HydrogenAppLoader {
  constructor({ directory }) {
    this.errors = new AppErrors();
    this.directory = directory;
  }
  async loaded() {
    if (!await file.exists(this.directory)) {
      throw new error.Abort(`Couldn't find directory ${this.directory}`);
    }
    const { configuration } = await this.loadConfig();
    const yarnLockPath = path.join(this.directory, genericConfigurationFileNames.yarn.lockfile);
    const yarnLockExists = await file.exists(yarnLockPath);
    const pnpmLockPath = path.join(this.directory, genericConfigurationFileNames.pnpm.lockfile);
    const pnpmLockExists = await file.exists(pnpmLockPath);
    const packageJSONPath = path.join(this.directory, "package.json");
    const name = await dependency.getPackageName(packageJSONPath);
    const nodeDependencies = await dependency.getDependencies(packageJSONPath);
    const tsConfigExists = await file.exists(path.join(this.directory, "tsconfig.json"));
    const language = tsConfigExists && nodeDependencies.typescript ? "TypeScript" : "JavaScript";
    let dependencyManager;
    if (yarnLockExists) {
      dependencyManager = "yarn";
    } else if (pnpmLockExists) {
      dependencyManager = "pnpm";
    } else {
      dependencyManager = "npm";
    }
    const app = {
      name,
      directory: this.directory,
      configuration,
      dependencyManager,
      nodeDependencies,
      language
    };
    if (!this.errors.isEmpty())
      app.errors = this.errors;
    return app;
  }
  async loadConfig() {
    const abortError = new error.Abort(`Couldn't find hydrogen configuration file`);
    try {
      const config = await loadConfig({ root: this.directory });
      if (!config) {
        throw abortError;
      }
      return config;
    } catch (error) {
      abortError.stack = error.stack;
      throw abortError;
    }
  }
}
async function load(directory) {
  const loader = new HydrogenAppLoader({ directory });
  return loader.loaded();
}

export { genericConfigurationFileNames as g, load as l };
//# sourceMappingURL=hydrogen-21276a42.js.map
