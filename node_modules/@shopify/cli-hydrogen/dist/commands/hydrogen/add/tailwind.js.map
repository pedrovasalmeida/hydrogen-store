{"version":3,"file":"tailwind.js","sources":["../../../../src/cli/services/tailwind.ts","../../../../src/cli/commands/hydrogen/add/tailwind.ts"],"sourcesContent":["import {HydrogenApp} from '../models/hydrogen'\nimport {ui, vscode, system, path, file, error, dependency} from '@shopify/cli-kit'\nimport stream from 'node:stream'\n\ninterface AddTailwindOptions {\n  app: HydrogenApp\n  force: boolean\n  directory: string\n  install: boolean\n}\n\nconst tailwindImports = [\n  \"@import 'tailwindcss/base';\",\n  \"@import 'tailwindcss/components';\",\n  \"@import 'tailwindcss/utilities';\",\n]\n\nconst tailwindImportsExist = (indexCSS: string) =>\n  tailwindImports.map((el) => new RegExp(el)).every((tailwindDirective) => tailwindDirective.test(indexCSS))\n\nexport async function addTailwind({app, force, install, directory}: AddTailwindOptions) {\n  const list = new ui.Listr([\n    {\n      title: 'Installing additional dependencies',\n      skip: () => !install,\n      task: async (_, task) => {\n        const requiredDependencies = ['postcss', 'postcss-loader', 'tailwindcss', 'autoprefixer']\n        await dependency.addNPMDependenciesWithoutVersionIfNeeded(requiredDependencies, {\n          dependencyManager: app.dependencyManager,\n          type: 'prod',\n          directory: app.directory,\n          stderr: new stream.Writable({\n            write(chunk, encoding, next) {\n              task.output = chunk.toString()\n              next()\n            },\n          }),\n          stdout: new stream.Writable({\n            write(chunk, encoding, next) {\n              task.output = chunk.toString()\n              next()\n            },\n          }),\n        })\n        task.title = 'Dependencies installed'\n      },\n    },\n\n    {\n      title: 'Adding PostCSS configuration',\n      task: async (_, task) => {\n        const postCSSConfiguration = path.join(directory, 'postcss.config.js')\n\n        if (await file.exists(postCSSConfiguration)) {\n          if (force) {\n            await file.remove(postCSSConfiguration)\n          } else {\n            throw new error.Abort('PostCSS config already exists.\\nUse --force to override existing config.')\n          }\n        }\n\n        const postCSSConfig = await file.format(\n          ['module.exports = {', 'plugins: {', 'tailwindcss: {},', 'autoprefixer: {},', '},', ' };'].join('\\n'),\n          {path: 'postcss.config.js'},\n        )\n\n        await file.write(postCSSConfiguration, postCSSConfig)\n\n        task.title = 'PostCSS configuration added'\n      },\n    },\n\n    {\n      title: 'Initializing Tailwind CSS...',\n      task: async (_, task) => {\n        const tailwindConfigurationPath = path.join(directory, 'tailwind.config.js')\n\n        if (await file.exists(tailwindConfigurationPath)) {\n          if (force) {\n            await file.remove(tailwindConfigurationPath)\n          } else {\n            throw new error.Abort('Tailwind config already exists.\\nUse --force to override existing config.')\n          }\n        }\n\n        await system.exec(app.dependencyManager, ['tailwindcss', 'init', tailwindConfigurationPath], {\n          cwd: directory,\n        })\n\n        await replace(\n          'content: []',\n          \"content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}']\",\n          tailwindConfigurationPath,\n        )\n\n        task.title = 'Tailwind configuration added'\n      },\n    },\n    {\n      title: 'Importing Tailwind CSS in index.css',\n      task: async (_ctx, task) => {\n        const indexCSSPath = path.join(directory, 'src', 'index.css')\n        const indexCSS = await file.read(indexCSSPath)\n\n        if (tailwindImportsExist(indexCSS)) {\n          task.skip('Imports already exist in index.css')\n        } else {\n          const newIndexCSS = tailwindImports.join('\\n') + indexCSS\n\n          await file.write(indexCSSPath, newIndexCSS)\n        }\n\n        task.title = 'Tailwind imports added'\n      },\n    },\n    {\n      title: 'Adding editor plugin recommendations',\n      task: async (_, task) => {\n        await vscode.addRecommendedExtensions(directory, ['csstools.postcss', 'bradlc.vscode-tailwindcss'])\n        task.title = 'Editor plugin recommendations added'\n      },\n    },\n  ])\n  await list.run()\n}\n\nasync function replace(find: string | RegExp, replace: string, filepath: string) {\n  const original = await file.read(filepath)\n  const modified = original.replace(find, replace)\n  await file.write(filepath, modified)\n}\n","import {hydrogenFlags} from '../../../flags'\nimport {addTailwind} from '../../../services/tailwind'\nimport {load as loadApp, HydrogenApp} from '../../../models/hydrogen'\nimport {Command, Flags} from '@oclif/core'\nimport {path, cli} from '@shopify/cli-kit'\n\nexport default class AddTailwind extends Command {\n  static flags = {\n    ...cli.globalFlags,\n    ...hydrogenFlags,\n    force: Flags.boolean({\n      hidden: false,\n      char: 'f',\n      description: 'overwrite existing configuration',\n      default: false,\n      env: 'SHOPIFY_FLAG_FORCE',\n    }),\n  }\n\n  public async run(): Promise<void> {\n    const {\n      flags: {path: pathFlag, install, force},\n    } = await this.parse(AddTailwind)\n    const directory = pathFlag ? path.resolve(pathFlag) : process.cwd()\n\n    const app: HydrogenApp = await loadApp(directory)\n\n    await addTailwind({app, directory, install, force})\n  }\n}\n"],"names":["loadApp"],"mappings":"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"}