{"version":3,"file":"build.js","sources":["../../../src/cli/services/build.ts","../../../src/cli/commands/hydrogen/build.ts"],"sourcesContent":["import {build as viteBuild} from 'vite'\nimport {ui, environment} from '@shopify/cli-kit'\n\ntype Target = 'node' | 'client' | 'worker'\n\ninterface DevOptions {\n  directory: string\n  targets: {[key in Target]: boolean | string}\n  base?: string\n}\n\nasync function build({directory, targets, base}: DevOptions) {\n  const commonConfig = {base, root: directory}\n\n  const tasks: ui.ListrTask[] = Object.entries(targets)\n    .filter(([_, value]) => value)\n    .map(([key, value]) => {\n      return {\n        title: `Building ${key} code`,\n        task: async (_, task) => {\n          if (key === 'worker') {\n            process.env.WORKER = 'true'\n          }\n          await viteBuild({\n            ...commonConfig,\n            build: {\n              outDir: `dist/${key}`,\n              ssr: typeof value === 'string' ? value : undefined,\n              manifest: key === 'client',\n            },\n          })\n\n          task.title = `Built ${key} code`\n        },\n      }\n    })\n\n  const list = new ui.Listr(tasks, {rendererSilent: environment.local.isUnitTest()})\n\n  await list.run()\n}\n\nexport default build\n","import buildService from '../../services/build'\nimport {hydrogenFlags} from '../../flags'\nimport {Command, Flags} from '@oclif/core'\nimport {path, cli} from '@shopify/cli-kit'\n\nconst PLATFORM_ENTRIES = {\n  node: `@shopify/hydrogen/platforms/node`,\n  worker: `@shopify/hydrogen/platforms/worker`,\n}\n\nexport default class Build extends Command {\n  static description = 'Builds a Hydrogen storefront for production'\n  static flags = {\n    ...cli.globalFlags,\n    path: hydrogenFlags.path,\n    base: Flags.string({\n      description: ' the public path when served in production',\n      env: 'SHOPIFY_FLAG_BUILD_BASE',\n    }),\n    client: Flags.boolean({\n      description: 'build the client code',\n      env: 'SHOPIFY_FLAG_BUILD_CLIENT',\n      allowNo: true,\n      default: true,\n    }),\n    target: Flags.string({\n      char: 't',\n      description: 'the target platform to build for (worker or node)',\n      options: ['node', 'worker'],\n      default: 'worker',\n      env: 'SHOPIFY_FLAG_BUILD_TARGET',\n    }),\n    entry: Flags.string({\n      description: 'produce Server Side Rendering (SSR) build for node environments',\n      env: 'SHOPIFY_FLAG_BUILD_SSR_ENTRY',\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Build)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n\n    const entry = flags.entry || PLATFORM_ENTRIES[flags.target as 'node' | 'worker']\n\n    const targets = {\n      client: flags.client,\n      worker: flags.target === 'worker' ? entry : false,\n      node: flags.target === 'node' ? entry : false,\n    }\n\n    await buildService({...flags, directory, targets})\n  }\n}\n"],"names":["viteBuild","buildService"],"mappings":"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"}