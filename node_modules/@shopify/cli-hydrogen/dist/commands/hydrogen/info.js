import { output, string, os, cli, path } from '@shopify/cli-kit';
import { l as load } from '../../hydrogen-21276a42.js';
import { h as hydrogenFlags } from '../../flags-39d1e3c2.js';
import { Flags, Command } from '@oclif/core';
import 'vite';
import 'path';
import 'fs';

function info(app, { showPrivateData }) {
  const appInfo = new HydrogenAppInfo(app);
  return appInfo.output({ showPrivateData });
}
const NOT_FOUND_TEXT = output.content`${output.token.italic("Not found")}`.value;
const NOT_CONFIGURED_TEXT = output.content`${output.token.italic("Not yet configured")}`.value;
class AppInfo {
  constructor(app) {
    this.app = app;
  }
  output({ showPrivateData }) {
    const sections = [
      this.projectSettingsSection(),
      this.storefrontSettingsSection({ showPrivateData }),
      this.eslintSection(),
      this.systemInfoSection()
    ];
    return sections.map((sectionContents) => this.section(...sectionContents)).join("\n\n");
  }
  projectSettingsSection() {
    const title = "Your Project";
    const lines = [
      ["Name", this.app.name],
      ["Project location", this.app.directory],
      ["Language", this.app.language]
    ];
    const projectInfo = this.linesToColumns(lines);
    return [title, projectInfo];
  }
  storefrontSettingsSection({ showPrivateData }) {
    const errors = [];
    const title = "Storefront";
    if (this.app.configuration.shopify && typeof this.app.configuration.shopify === "function") {
      return [title, "Storefront settings defined as a function are not supported in this command."];
    }
    const privateFields = showPrivateData ? ["storefrontToken"] : [];
    const fields = [
      "storeDomain",
      "storefrontApiVersion",
      ...privateFields
    ];
    const storefrontInfo = this.configurationCheck(fields, this.app.configuration.shopify);
    let errorContent = `
${errors.map(this.formattedError).join("\n")}`;
    if (errorContent.trim() === "")
      errorContent = "";
    return [title, `${this.linesToColumns(storefrontInfo)}${errorContent}`];
  }
  eslintSection() {
    const errors = [];
    const title = "ESLint";
    const dependencyResults = this.dependencyCheck(["eslint", "eslint-plugin-hydrogen"]);
    let errorContent = `
${errors.map(this.formattedError).join("\n")}`;
    if (errorContent.trim() === "")
      errorContent = "";
    return [title, `${this.linesToColumns(dependencyResults)}${errorContent}`];
  }
  configurationCheck(key, configObject = this.app.configuration) {
    const keys = Array.isArray(key) ? key : [key];
    const result = keys.reduce((acc, key2) => {
      const found = configObject[key2];
      if (typeof found === "string") {
        const result3 = [string.capitalize(key2.toString()), found];
        return [...acc, result3];
      }
      const result2 = [key2, NOT_CONFIGURED_TEXT];
      return [...acc, result2];
    }, []);
    return result;
  }
  dependencyCheck(dependency) {
    const dependencies = Array.isArray(dependency) ? dependency : [dependency];
    const result = dependencies.reduce((acc, dependency2) => {
      const found = this.app.nodeDependencies[dependency2];
      if (found) {
        const result3 = [dependency2, found];
        return [...acc, result3];
      }
      const result2 = [dependency2, NOT_FOUND_TEXT];
      return [...acc, result2];
    }, []);
    return result;
  }
  formattedError(str) {
    const [errorFirstLine, ...errorRemainingLines] = str.split("\n");
    const errorLines = [`! ${errorFirstLine}`, ...errorRemainingLines.map((line) => `  ${line}`)];
    return output.content`${output.token.errorText(errorLines.join("\n"))}`.value;
  }
  systemInfoSection() {
    const title = "Tooling and System";
    const { platform, arch } = os.platformAndArch();
    this.dependencyCheck(["eslint", "eslint-plugin-hydrogen"]);
    const lines = [
      ...this.dependencyCheck(["@shopify/hydrogen", "@shopify/cli-hydrogen", "@shopify/cli"]),
      ["Package manager", this.app.dependencyManager],
      ["OS", `${platform}-${arch}`],
      ["Shell", process.env.SHELL || "unknown"],
      ["Node.js version", process.version]
    ];
    return [title, this.linesToColumns(lines)];
  }
  linesToColumns(lines) {
    const widths = [];
    for (let i = 0; lines[0] && i < lines[0].length; i++) {
      const columnRows = lines.map((line) => line[i]);
      widths.push(Math.max(...columnRows.map((row) => output.unstyled(row).length)));
    }
    const paddedLines = lines.map((line) => {
      return line.map((col, index) => {
        return `${col}${" ".repeat(widths[index] - output.unstyled(col).length)}`;
      }).join("   ").trimEnd();
    }).join("\n");
    return paddedLines;
  }
  section(title, body) {
    const formattedTitle = `${title.toUpperCase()}${" ".repeat(35 - title.length)}`;
    return output.content`${output.token.heading(formattedTitle)}\n${body}`.value;
  }
}
class HydrogenAppInfo extends AppInfo {
}

const _Info = class extends Command {
  async run() {
    const { flags } = await this.parse(_Info);
    const directory = flags.path ? path.resolve(flags.path) : process.cwd();
    const app = await load(directory);
    output.info(info(app, { showPrivateData: flags.showToken }));
    if (app.errors)
      process.exit(2);
  }
};
let Info = _Info;
Info.description = "Print basic information about your hydrogen app";
Info.flags = {
  ...cli.globalFlags,
  ...hydrogenFlags,
  showToken: Flags.boolean({
    hidden: false,
    description: "Show storefront API token",
    default: false,
    env: "SHOPIFY_HYDROGEN_FLAG_SHOW_TOKEN"
  })
};

export { Info as default };
//# sourceMappingURL=info.js.map
