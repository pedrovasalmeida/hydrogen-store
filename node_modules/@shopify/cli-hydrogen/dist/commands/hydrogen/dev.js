import { createServer } from 'vite';
import { error, cli, path } from '@shopify/cli-kit';
import { h as hydrogenFlags } from '../../flags-39d1e3c2.js';
import { Flags, Command } from '@oclif/core';

async function dev({ directory, force, host }) {
  const server = await createServer({
    root: directory,
    server: {
      open: true,
      force,
      host
    }
  });
  try {
    await server.listen();
    server.printUrls();
    server.config.logger.info("");
  } catch (error$1) {
    const abortError = new error.Abort(error$1.message);
    abortError.stack = error$1.stack;
    throw abortError;
  }
}

const _Dev = class extends Command {
  async run() {
    const { flags } = await this.parse(_Dev);
    const directory = flags.path ? path.resolve(flags.path) : process.cwd();
    await dev({ directory, ...flags });
  }
};
let Dev = _Dev;
Dev.description = "Run a Hydrogen storefront locally for development";
Dev.flags = {
  ...cli.globalFlags,
  path: hydrogenFlags.path,
  force: Flags.boolean({
    description: "force dependency pre-bundling.",
    env: "SHOPIFY_FLAG_DEV_FORCE"
  }),
  host: Flags.boolean({
    description: "listen on all addresses, including LAN and public addresses.",
    env: "SHOPIFY_FLAG_DEV_HOST"
  })
};

export { Dev as default };
//# sourceMappingURL=dev.js.map
